#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∫–∞–Ω–µ—Ä–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
"""

import argparse
import sys
import time
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from vulnerability_scanner import VulnerabilityScanner
from template_extractor import TemplateExtractor

class SecurityAnalyzer:
    def __init__(self, base_url, delay=1.0):
        self.base_url = base_url
        self.delay = delay
        self.scanner = VulnerabilityScanner(base_url, delay)
        self.extractor = TemplateExtractor(base_url)
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = time.strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # –≠—Ç–∞–ø 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        self.log("–≠—Ç–∞–ø 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
        self.scanner.run_full_scan()
        
        # –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
        self.log("–≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤")
        extracted_files = self.extractor.run_extraction()
        
        # –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.log("–≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        self.analyze_results()
        
        return {
            'vulnerabilities': self.scanner.results,
            'extracted_files': extracted_files
        }
        
    def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        vulnerabilities = self.scanner.results
        
        # –ü–æ–¥—Å—á–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        critical_count = len(vulnerabilities['path_traversal']) + len(vulnerabilities['directory_listing'])
        high_count = len(vulnerabilities['admin_panels']) + len(vulnerabilities['sensitive_files'])
        medium_count = len(vulnerabilities['template_files'])
        
        print("\n" + "="*60)
        print("–ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("="*60)
        
        print(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï: {critical_count}")
        print(f"üü† –í–´–°–û–ö–ò–ï: {high_count}")
        print(f"üü° –°–†–ï–î–ù–ò–ï: {medium_count}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        print("\nüõ°Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        
        if critical_count > 0:
            print("  ‚ö†Ô∏è  –ù–ï–ú–ï–î–õ–ï–ù–ù–û —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏!")
            print("     - –û—Ç–∫–ª—é—á–∏—Ç–µ directory listing")
            print("     - –ò—Å–ø—Ä–∞–≤—å—Ç–µ path traversal —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
            
        if high_count > 0:
            print("  üîí –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –ø–∞–Ω–µ–ª—è–º")
            print("     - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏")
            print("     - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
            
        if medium_count > 0:
            print("  üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤")
            print("     - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüìã –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("  - –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ CMS –∏ –ø–ª–∞–≥–∏–Ω—ã")
        print("  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –¥–ª—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        print("  - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ WAF (Web Application Firewall)")
        print("  - –ü—Ä–æ–≤–æ–¥–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∞—É–¥–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("  - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
        
    def save_complete_report(self, results, filename='security_report.json'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'target_url': self.base_url,
            'vulnerabilities': results['vulnerabilities'],
            'extracted_files': results['extracted_files'],
            'summary': {
                'total_vulnerabilities': sum(len(v) for v in results['vulnerabilities'].values() if isinstance(v, list)),
                'total_files_extracted': len(results['extracted_files']),
                'critical_issues': len(results['vulnerabilities']['path_traversal']) + len(results['vulnerabilities']['directory_listing'])
            }
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            import json
            json.dump(report, f, ensure_ascii=False, indent=2)
            
        self.log(f"–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")

def main():
    parser = argparse.ArgumentParser(
        description='–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ë–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  python security_analyzer.py --url https://100200.ru

  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  python security_analyzer.py --url https://100200.ru --delay 2.0

  # –¢–æ–ª—å–∫–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
  python security_analyzer.py --url https://100200.ru --scan-only

  # –¢–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
  python security_analyzer.py --url https://100200.ru --extract-only

‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö!
        """
    )
    
    parser.add_argument('--url', default='https://100200.ru', 
                       help='URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://100200.ru)')
    parser.add_argument('--delay', type=float, default=1.0,
                       help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1.0)')
    parser.add_argument('--scan-only', action='store_true',
                       help='–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π')
    parser.add_argument('--extract-only', action='store_true',
                       help='–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤')
    parser.add_argument('--output', default='security_report.json',
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: security_report.json)')
    
    args = parser.parse_args()
    
    print("üîê –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö!")
    print(f"üéØ –¶–µ–ª—å: {args.url}")
    print(f"‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞: {args.delay} —Å–µ–∫")
    print("-" * 60)
    
    analyzer = SecurityAnalyzer(args.url, args.delay)
    
    try:
        if args.scan_only:
            print("üîç –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            analyzer.scanner.run_full_scan()
            analyzer.scanner.print_summary()
            analyzer.scanner.save_results('vulnerability_scan.json')
            
        elif args.extract_only:
            print("üìÅ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤")
            extracted_files = analyzer.extractor.run_extraction()
            analyzer.extractor.print_summary(extracted_files)
            
        else:
            print("üîê –†–µ–∂–∏–º: –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            results = analyzer.run_full_analysis()
            analyzer.save_complete_report(results, args.output)
            
    except KeyboardInterrupt:
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
        
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
